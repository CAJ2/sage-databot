# Generated by ariadne-codegen
# Source: src/graphql/queries

from typing import Any, Dict, Optional, Union

from .add_item import AddItem
from .add_org import AddOrg
from .add_variant import AddVariant
from .base_client import BaseClient
from .base_model import UNSET, UnsetType
from .get_org import GetOrg
from .get_root_category import GetRootCategory
from .get_variant import GetVariant
from .input_types import (
    CreateItemInput,
    CreateOrgInput,
    CreateVariantInput,
    UpdateItemInput,
    UpdateOrgInput,
    UpdateVariantInput,
)
from .update_item import UpdateItem
from .update_org import UpdateOrg
from .update_variant import UpdateVariant


def gql(q: str) -> str:
    return q


class Client(BaseClient):
    def get_root_category(self, **kwargs: Any) -> GetRootCategory:
        query = gql(
            """
            query GetRootCategory {
              rootCategory {
                id
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = self.execute(
            query=query, operation_name="GetRootCategory", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetRootCategory.model_validate(data)

    def add_item(self, input: CreateItemInput, **kwargs: Any) -> AddItem:
        query = gql(
            """
            mutation AddItem($input: CreateItemInput!) {
              createItem(input: $input) {
                item {
                  id
                  name
                  desc
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query, operation_name="AddItem", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return AddItem.model_validate(data)

    def update_item(self, input: UpdateItemInput, **kwargs: Any) -> UpdateItem:
        query = gql(
            """
            mutation UpdateItem($input: UpdateItemInput!) {
              updateItem(input: $input) {
                item {
                  id
                  name
                  desc
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query, operation_name="UpdateItem", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return UpdateItem.model_validate(data)

    def get_org(self, org_id: str, **kwargs: Any) -> GetOrg:
        query = gql(
            """
            query GetOrg($orgId: ID!) {
              getOrg(id: $orgId) {
                id
                name
                desc
                slug
              }
            }
            """
        )
        variables: Dict[str, object] = {"orgId": org_id}
        response = self.execute(
            query=query, operation_name="GetOrg", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetOrg.model_validate(data)

    def add_org(self, input: CreateOrgInput, **kwargs: Any) -> AddOrg:
        query = gql(
            """
            mutation AddOrg($input: CreateOrgInput!) {
              createOrg(input: $input) {
                org {
                  id
                  name
                  desc
                  slug
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query, operation_name="AddOrg", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return AddOrg.model_validate(data)

    def update_org(self, input: UpdateOrgInput, **kwargs: Any) -> UpdateOrg:
        query = gql(
            """
            mutation UpdateOrg($input: UpdateOrgInput!) {
              updateOrg(input: $input) {
                org {
                  id
                  name
                  desc
                  slug
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query, operation_name="UpdateOrg", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return UpdateOrg.model_validate(data)

    def get_variant(
        self,
        first: Union[Optional[int], UnsetType] = UNSET,
        after: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GetVariant:
        query = gql(
            """
            query GetVariant($first: Int, $after: String) {
              getVariants(first: $first, after: $after) {
                edges {
                  node {
                    id
                    name
                    desc
                    created_at
                    updated_at
                  }
                }
                pageInfo {
                  hasNextPage
                  endCursor
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"first": first, "after": after}
        response = self.execute(
            query=query, operation_name="GetVariant", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetVariant.model_validate(data)

    def add_variant(self, input: CreateVariantInput, **kwargs: Any) -> AddVariant:
        query = gql(
            """
            mutation AddVariant($input: CreateVariantInput!) {
              createVariant(input: $input) {
                variant {
                  id
                  name
                  desc
                  created_at
                  updated_at
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query, operation_name="AddVariant", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return AddVariant.model_validate(data)

    def update_variant(self, input: UpdateVariantInput, **kwargs: Any) -> UpdateVariant:
        query = gql(
            """
            mutation UpdateVariant($input: UpdateVariantInput!) {
              updateVariant(input: $input) {
                variant {
                  id
                  name
                  desc
                  created_at
                  updated_at
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query, operation_name="UpdateVariant", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return UpdateVariant.model_validate(data)
