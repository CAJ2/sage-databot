# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @cacheControl(inheritMaxAge: Boolean, maxAge: Int, scope: CacheControlScope) on FIELD_DEFINITION | INTERFACE | OBJECT | UNION

enum CacheControlScope {
  PRIVATE
  PUBLIC
}

type CategoriesPage {
  edges: [CategoryEdge!]
  nodes: [Category!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type Category implements Named {
  ancestors(after: String, before: String, first: Int, last: Int): CategoriesPage!
  children(after: String, before: String, first: Int, last: Int): CategoriesPage!
  created_at: DateTime!
  desc: String
  desc_short: String
  desc_short_tr: [TranslatedOutput!]
  desc_tr: [TranslatedOutput!]
  descendants(after: String, before: String, first: Int, last: Int): CategoriesPage!
  id: ID!
  image_url: String
  items(after: String, before: String, first: Int, last: Int): ItemsPage!
  name: String!
  name_tr: [TranslatedOutput!]
  parents(after: String, before: String, first: Int, last: Int): CategoriesPage!
  updated_at: DateTime!
}

type CategoryEdge {
  cursor: String!
  node: Category!
}

type Change {
  created_at: DateTime!
  description: String
  edits(after: String, before: String, first: Int, id: ID, last: Int, type: EditModelType): ChangeEditsPage!
  id: ID!
  sources(after: String, before: String, first: Int, last: Int): SourcesPage!
  status: ChangeStatus!
  title: String
  updated_at: DateTime!
  user: User!
}

type ChangeEdge {
  cursor: String!
  node: Change!
}

type ChangeEditsPage {
  edges: [EditEdge!]
  nodes: [Edit!]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Status of a change"""
enum ChangeStatus {
  APPROVED
  DRAFT
  MERGED
  PROPOSED
  REJECTED
}

type ChangesPage {
  edges: [ChangeEdge!]
  nodes: [Change!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type Component implements Named {
  created_at: DateTime!
  desc: String
  history: [ComponentHistory!]!

  """The ID of the model"""
  id: ID!
  image_url: String
  materials: [ComponentMaterial!]!
  name: String
  primary_material: Material!
  recycle(region_id: ID): [ComponentRecycle!]
  recycle_score(region_id: ID): StreamScore
  region: Region
  tags: [Tag!]!
  updated_at: DateTime!
}

type ComponentEdge {
  cursor: String!
  node: Component!
}

type ComponentHistory {
  changes: String
  component_id: String!
  datetime: DateTime!
  original: String
}

type ComponentMaterial {
  material: Material!
  material_fraction: Float
}

input ComponentMaterialInput {
  id: ID!
  material_fraction: Float
}

type ComponentRecycle {
  context: StreamContext
  stream: RecyclingStream
}

input ComponentRegionInput {
  id: ID!
}

input ComponentTagsInput {
  id: ID!
  meta: JSONObject
}

type ComponentsPage {
  edges: [ComponentEdge!]
  nodes: [Component!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type Container {
  access: String
  color: String
  image: String
  image_entry_point: ContainerImageEntryPoint
  shape: ContainerShape
  type: String!
}

type ContainerImageEntryPoint {
  side: String!
  x: Float!
  y: Float!
}

type ContainerShape {
  depth: Float
  height: Float
  width: Float
}

input CreateCategoryInput {
  add_sources: [SourceInput!]
  apply: Boolean
  change: CreateChangeInput
  change_id: ID
  desc: String
  desc_short: String
  desc_short_tr: [TranslatedInput!]
  desc_tr: [TranslatedInput!]
  image_url: String
  lang: String
  name: String
  name_tr: [TranslatedInput!]
  remove_sources: [ID!]
}

type CreateCategoryOutput {
  category: Category
  change: Change
}

input CreateChangeInput {
  description: String
  sources: [ID!]
  status: ChangeStatus
  title: String
}

type CreateChangeOutput {
  change: Change
}

input CreateComponentInput {
  add_sources: [SourceInput!]
  apply: Boolean
  change: CreateChangeInput
  change_id: ID
  desc: String
  desc_tr: [TranslatedInput!]
  image_url: String
  lang: String
  materials: [ComponentMaterialInput!]
  name: String
  name_tr: [TranslatedInput!]
  primary_material: ComponentMaterialInput
  region: ComponentRegionInput
  remove_sources: [ID!]
  tags: [ComponentTagsInput!]
}

type CreateComponentOutput {
  change: Change
  component: Component
}

input CreateItemInput {
  add_sources: [SourceInput!]
  apply: Boolean
  categories: [ItemCategoriesInput!]
  change: CreateChangeInput
  change_id: ID
  desc: String
  desc_tr: [TranslatedInput!]
  image_url: String
  lang: String
  name: String
  name_tr: [TranslatedInput!]
  remove_sources: [ID!]
  tags: [ItemTagsInput!]
}

type CreateItemOutput {
  change: Change
  item: Item
}

input CreateOrgInput {
  add_sources: [SourceInput!]
  apply: Boolean
  avatar_url: String
  change: CreateChangeInput
  change_id: ID
  desc: String
  lang: String
  name: String!
  remove_sources: [ID!]
  slug: String!
  website_url: String
}

type CreateOrgOutput {
  change: Change
  org: Org
}

input CreateProcessInput {
  add_sources: [SourceInput!]
  apply: Boolean
  change: CreateChangeInput
  change_id: ID
  desc: String
  desc_tr: [TranslatedInput!]
  efficiency: JSONObject
  instructions: JSONObject
  intent: String!
  lang: String
  material: ProcessMaterialInput
  name: String
  name_tr: [TranslatedInput!]
  org: ProcessOrgInput
  place: ProcessPlaceInput
  region: ProcessRegionInput
  remove_sources: [ID!]
  rules: JSONObject
  variant: ProcessVariantInput
}

type CreateProcessOutput {
  change: Change
  process: Process
}

input CreateSourceInput {
  content: JSONObject
  content_url: String
  location: String
  metadata: JSONObject
  type: SourceType!
}

type CreateSourceOutput {
  source: Source
}

input CreateTagDefinitionInput {
  bg_color: String
  desc: String
  image: String
  meta_template: JSONObject
  name: String!
  type: TagType!
}

type CreateTagDefinitionOutput {
  tag: TagDefinition
}

input CreateVariantInput {
  add_sources: [SourceInput!]
  apply: Boolean
  change: CreateChangeInput
  change_id: ID
  code: String
  components: [VariantComponentsInput!]
  desc: String
  desc_tr: [TranslatedInput!]
  image_url: String
  items: [VariantItemsInput!]
  lang: String
  name: String
  name_tr: [TranslatedInput!]
  orgs: [VariantOrgsInput!]
  region: VariantRegionsInput
  regions: [VariantRegionsInput!]
  remove_sources: [ID!]
  tags: [VariantTagsInput!]
}

type CreateVariantOutput {
  change: Change
  variant: Variant
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with RFC 3339.
"""
scalar DateTime

type DeleteChangeOutput {
  success: Boolean
}

input DeleteInput {
  add_sources: [SourceInput!]
  apply: Boolean
  change: CreateChangeInput
  change_id: ID
  id: ID!
  remove_sources: [ID!]
}

type DeleteOutput {
  id: String
  success: Boolean!
}

type DeleteSourceOutput {
  success: Boolean
}

type DirectEdit {
  entity_name: String!
  id: ID
  model_create: JSONObject
  model_update: JSONObject
}

type DiscardEditOutput {
  id: ID
  success: Boolean
}

type Edit {
  changes: EditModel
  changes_create: JSONObject
  changes_update: JSONObject
  entity_name: String!
  id: ID
  original: EditModel
}

type EditEdge {
  cursor: String!
  node: Edit!
}

union EditModel = Category | Component | Item | Material | Place | Process | Region | Variant

"""Type of the model being edited"""
enum EditModelType {
  Category
  Component
  Item
  Material
  Place
  Process
  Region
  Variant
}

type Item implements Named {
  categories(after: String, before: String, first: Int, last: Int): CategoriesPage!
  created_at: DateTime!
  desc: String

  """The ID of the model"""
  id: ID!
  image_url: String
  name: String
  tags(after: String, before: String, first: Int, last: Int): TagPage!
  updated_at: DateTime!
  variants(after: String, before: String, first: Int, last: Int): VariantsPage!
}

input ItemCategoriesInput {
  id: ID!
}

type ItemEdge {
  cursor: String!
  node: Item!
}

input ItemTagsInput {
  id: ID!
  meta: JSONObject
}

type ItemsPage {
  edges: [ItemEdge!]
  nodes: [Item!]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type MarkSourceProcessedOutput {
  success: Boolean
}

type Material implements Named {
  ancestors(after: String, before: String, first: Int, last: Int): MaterialsPage!
  children(after: String, before: String, first: Int, last: Int): MaterialsPage!
  components(after: String, before: String, first: Int, last: Int): ComponentsPage!
  created_at: DateTime!
  desc: String
  descendants(after: String, before: String, first: Int, last: Int): MaterialsPage!
  id: ID!
  name: String
  parents(after: String, before: String, first: Int, last: Int): MaterialsPage!
  primary_components(after: String, before: String, first: Int, last: Int): ComponentsPage!
  processes(after: String, before: String, first: Int, last: Int): ProcessPage!
  shape: String
  technical: Boolean!
  updated_at: DateTime!
}

type MaterialEdge {
  cursor: String!
  node: Material!
}

type MaterialsPage {
  edges: [MaterialEdge!]
  nodes: [Material!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type MergeChangeOutput {
  change: Change
}

type ModelEditSchema {
  create: ModelSchema
  delete: ModelSchema
  update: ModelSchema
}

type ModelSchema {
  schema: JSONObject
  uischema: JSONObject
}

type Mutation {
  createCategory(input: CreateCategoryInput!): CreateCategoryOutput
  createChange(input: CreateChangeInput!): CreateChangeOutput
  createComponent(input: CreateComponentInput!): CreateComponentOutput
  createItem(input: CreateItemInput!): CreateItemOutput
  createOrg(input: CreateOrgInput!): CreateOrgOutput
  createProcess(input: CreateProcessInput!): CreateProcessOutput
  createSource(input: CreateSourceInput!): CreateSourceOutput
  createTagDefinition(input: CreateTagDefinitionInput!): CreateTagDefinitionOutput
  createVariant(input: CreateVariantInput!): CreateVariantOutput
  deleteCategory(input: DeleteInput!): DeleteOutput
  deleteChange(id: ID!): DeleteChangeOutput
  deleteComponent(input: DeleteInput!): DeleteOutput
  deleteItem(input: DeleteInput!): DeleteOutput
  deleteProcess(input: DeleteInput!): DeleteOutput
  deleteSource(id: ID!): DeleteSourceOutput
  deleteVariant(input: DeleteInput!): DeleteOutput
  discardEdit(change_id: ID!, edit_id: ID!): DiscardEditOutput
  markSourceProcessed(id: ID!): MarkSourceProcessedOutput
  mergeChange(id: ID!): MergeChangeOutput
  updateCategory(input: UpdateCategoryInput!): UpdateCategoryOutput
  updateChange(input: UpdateChangeInput!): UpdateChangeOutput
  updateComponent(input: UpdateComponentInput!): UpdateComponentOutput
  updateItem(input: UpdateItemInput!): UpdateItemOutput
  updateOrg(input: UpdateOrgInput!): UpdateOrgOutput
  updateProcess(input: UpdateProcessInput!): UpdateProcessOutput
  updateSource(input: UpdateSourceInput!): UpdateSourceOutput
  updateTagDefinition(input: UpdateTagDefinitionInput!): UpdateTagDefinitionOutput
  updateVariant(input: UpdateVariantInput!): UpdateVariantOutput
}

interface Named {
  """The description of the model"""
  desc: String

  """The ID of the model"""
  id: ID!

  """The name of the model"""
  name: String
}

type Org implements Named {
  avatar_url: String
  created_at: DateTime!
  desc: String

  """The ID of the model"""
  id: ID!
  name: String!
  slug: String!
  updated_at: DateTime!
  users(after: String, before: String, first: Int, last: Int): UserPage!
  website_url: String
}

type OrgEdge {
  cursor: String!
  node: Org!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Place implements Named {
  address: PlaceAddress
  created_at: DateTime!
  desc: String
  id: ID!
  location: PlaceLocation
  name: String
  org: Org
  tags: TagPage!
  updated_at: DateTime!
}

type PlaceAddress {
  city: String
  country: String
  housenumber: String
  postal_code: String
  region: String
  street: String
}

type PlaceEdge {
  cursor: String!
  node: Place!
}

type PlaceLocation {
  latitude: Float!
  longitude: Float!
}

type PlacesPage {
  edges: [PlaceEdge!]
  nodes: [Place!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type Process implements Named {
  created_at: DateTime!
  desc: String
  efficiency: ProcessEfficiency
  history: [ProcessHistory!]!

  """The ID of the model"""
  id: ID!
  intent: String!
  material: Material
  name: String
  org: Org
  place: Place
  region: Region
  updated_at: DateTime!
  variant: Variant
}

type ProcessEdge {
  cursor: String!
  node: Process!
}

type ProcessEfficiency {
  efficiency: Float
  equivalency: Float
  value_ratio: Float
}

type ProcessHistory {
  changes: String
  datetime: DateTime!
  original: String
  process: Process!
  user: User!
}

input ProcessMaterialInput {
  id: ID!
}

input ProcessOrgInput {
  id: ID!
}

type ProcessPage {
  edges: [ProcessEdge!]
  nodes: [Process!]
  pageInfo: PageInfo!
  totalCount: Int!
}

input ProcessPlaceInput {
  id: ID!
}

input ProcessRegionInput {
  id: ID!
}

input ProcessVariantInput {
  id: ID!
}

type Query {
  categories(after: String, before: String, first: Int, last: Int): CategoriesPage!
  category(id: ID!): Category
  categoryRoot: Category!
  categorySchema: ModelEditSchema
  change(id: ID!): Change
  changes(after: String, before: String, first: Int, last: Int, status: ChangeStatus, user_id: ID): ChangesPage!
  component(id: ID!, with_change: ID): Component
  componentSchema: ModelEditSchema
  components(after: String, before: String, first: Int, last: Int): ComponentsPage!
  directEdit(entity_name: String, id: ID): DirectEdit
  item(id: ID!): Item
  itemSchema: ModelEditSchema
  items(after: String, before: String, first: Int, last: Int): ItemsPage!
  material(id: ID!): Material
  materialRoot: Material!
  materials(after: String, before: String, first: Int, last: Int): MaterialsPage!
  org(id: ID!): Org
  place(id: ID!): Place
  places(after: String, before: String, first: Int, last: Int): PlacesPage!
  process(id: ID!): Process
  processSchema: ModelEditSchema
  processes(after: String, before: String, first: Int, last: Int, material: String, region: String): ProcessPage!
  region(id: ID!): Region
  regions(after: String, before: String, first: Int, last: Int): RegionsPage!
  search(lat_long: [Float!], limit: Int, offset: Int, query: String!, types: [SearchType!]): SearchResultPage!
  searchRegionsByPoint(after: String, before: String, first: Int, last: Int, lat_long: [Float!]!): RegionsPage!
  source(id: ID!): Source
  sources(after: String, before: String, first: Int, last: Int, type: SourceType): SourcesPage!
  tag(id: ID!): Tag
  tags(after: String, before: String, first: Int, last: Int): TagPage!
  user(id: ID!): User
  variant(id: ID!): Variant
  variantSchema: ModelEditSchema
  variants(after: String, before: String, first: Int, last: Int): VariantsPage!
}

type RecyclingStream {
  container: Container
  desc: String
  name: String
  score: StreamScore
  scores: [StreamScore!]
}

type Region {
  bbox: [Float!]
  created_at: DateTime!
  id: ID!
  min_zoom: Float
  name: String
  placetype: String!
  updated_at: DateTime!
}

type RegionEdge {
  cursor: String!
  node: Region!
}

type RegionsPage {
  edges: [RegionEdge!]
  nodes: [Region!]
  pageInfo: PageInfo!
  totalCount: Int!
}

union SearchResultItem = Category | Component | Item | Material | Org | Place | Region | Variant

type SearchResultItemEdge {
  cursor: String!
  node: SearchResultItem!
}

type SearchResultPage {
  edges: [SearchResultItemEdge!]
  nodes: [SearchResultItem!]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""The item type to search"""
enum SearchType {
  CATEGORY
  COMPONENT
  ITEM
  MATERIAL
  ORG
  PLACE
  REGION
  VARIANT
}

type Source {
  changes: ChangesPage!
  content: JSONObject
  content_url: String
  created_at: DateTime!
  id: ID!
  location: String
  metadata: JSONObject
  processed_at: DateTime
  type: SourceType!
  updated_at: DateTime!
  user: User!
}

type SourceEdge {
  cursor: String!
  node: Source!
}

input SourceInput {
  id: ID!
  meta: JSONObject
}

"""Type of source data"""
enum SourceType {
  API
  FILE
  IMAGE
  OTHER
  PDF
  TEXT
  URL
  VIDEO
}

type SourcesPage {
  edges: [SourceEdge!]
  nodes: [Source!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type StreamContext {
  desc: String
  key: String!
  name: String
  type: String
  value: String
}

type StreamScore {
  data_quality: StreamScoreRating
  data_quality_f: String
  max_score: Float
  min_score: Float
  name: String
  rating: StreamScoreRating
  rating_f: String
  score: Float
}

"""A rating enum used to describe scores"""
enum StreamScoreRating {
  EXCELLENT
  FAIR
  GOOD
  POOR
  UNKNOWN
  VERY_GOOD
}

type Tag implements Named {
  bg_color: String
  created_at: DateTime!
  desc: String

  """The ID of the model"""
  id: ID!
  image: String
  meta: JSONObject
  meta_template: JSONObject
  name: String!
  type: TagType!
  updated_at: DateTime!
}

type TagDefinition implements Named {
  bg_color: String
  created_at: DateTime!
  desc: String

  """The ID of the model"""
  id: ID!
  image: String
  meta_template: JSONObject
  name: String!
  type: TagType!
  updated_at: DateTime!
}

type TagDefinitionEdge {
  cursor: String!
  node: TagDefinition!
}

type TagEdge {
  cursor: String!
  node: Tag!
}

type TagPage {
  edges: [TagEdge!]
  nodes: [Tag!]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""The model type of the tag"""
enum TagType {
  COMPONENT
  ITEM
  ORG
  PLACE
  PROCESS
  VARIANT
}

input TranslatedInput {
  auto: Boolean! = false
  lang: String!
  text: String
}

type TranslatedOutput {
  auto: Boolean!
  lang: String!
  text: String
}

input UpdateCategoryInput {
  add_sources: [SourceInput!]
  apply: Boolean
  change: CreateChangeInput
  change_id: ID
  desc: String
  desc_short: String
  desc_short_tr: [TranslatedInput!]
  desc_tr: [TranslatedInput!]
  id: ID!
  image_url: String
  lang: String
  name: String
  name_tr: [TranslatedInput!]
  remove_sources: [ID!]
}

type UpdateCategoryOutput {
  category: Category
  change: Change
}

input UpdateChangeInput {
  description: String
  id: ID!
  sources: [ID!]
  status: ChangeStatus
  title: String
}

type UpdateChangeOutput {
  change: Change
}

input UpdateComponentInput {
  add_sources: [SourceInput!]
  add_tags: [ComponentTagsInput!]
  apply: Boolean
  change: CreateChangeInput
  change_id: ID
  desc: String
  desc_tr: [TranslatedInput!]
  id: ID!
  image_url: String
  lang: String
  materials: [ComponentMaterialInput!]
  name: String
  name_tr: [TranslatedInput!]
  primary_material: ComponentMaterialInput
  region: ComponentRegionInput
  remove_sources: [ID!]
  remove_tags: [ID!]
  tags: [ComponentTagsInput!]
}

type UpdateComponentOutput {
  change: Change
  component: Component
}

input UpdateItemInput {
  add_categories: [ItemCategoriesInput!]
  add_sources: [SourceInput!]
  add_tags: [ItemTagsInput!]
  apply: Boolean
  categories: [ItemCategoriesInput!]
  change: CreateChangeInput
  change_id: ID
  desc: String
  desc_tr: [TranslatedInput!]
  id: ID!
  image_url: String
  lang: String
  name: String
  name_tr: [TranslatedInput!]
  remove_categories: [ID!]
  remove_sources: [ID!]
  remove_tags: [ID!]
  tags: [ItemTagsInput!]
}

type UpdateItemOutput {
  change: Change
  item: Item
}

input UpdateOrgInput {
  add_sources: [SourceInput!]
  apply: Boolean
  avatar_url: String
  change: CreateChangeInput
  change_id: ID
  desc: String
  id: String!
  lang: String
  name: String
  remove_sources: [ID!]
  slug: String
  website_url: String
}

type UpdateOrgOutput {
  change: Change
  org: Org
}

input UpdateProcessInput {
  add_sources: [SourceInput!]
  apply: Boolean
  change: CreateChangeInput
  change_id: ID
  desc: String
  desc_tr: [TranslatedInput!]
  efficiency: JSONObject
  id: ID!
  instructions: JSONObject
  intent: String
  lang: String
  material: ProcessMaterialInput
  name: String
  name_tr: [TranslatedInput!]
  org: ProcessOrgInput
  place: ProcessPlaceInput
  region: ProcessRegionInput
  remove_sources: [ID!]
  rules: JSONObject
  variant: ProcessVariantInput
}

type UpdateProcessOutput {
  change: Change
  process: Process
}

input UpdateSourceInput {
  content: JSONObject
  content_url: String
  id: ID!
  location: String
  metadata: JSONObject
  type: SourceType
}

type UpdateSourceOutput {
  source: Source
}

input UpdateTagDefinitionInput {
  bg_color: String
  desc: String
  id: String!
  image: String
  meta_template: JSONObject
  name: String
  type: TagType
}

type UpdateTagDefinitionOutput {
  tag: TagDefinition
}

input UpdateVariantInput {
  add_components: [VariantComponentsInput!]
  add_items: [VariantItemsInput!]
  add_orgs: [VariantOrgsInput!]
  add_regions: [VariantRegionsInput!]
  add_sources: [SourceInput!]
  add_tags: [VariantTagsInput!]
  apply: Boolean
  change: CreateChangeInput
  change_id: ID
  code: String
  components: [VariantComponentsInput!]
  desc: String
  desc_tr: [TranslatedInput!]
  id: ID!
  image_url: String
  lang: String
  name: String
  name_tr: [TranslatedInput!]
  orgs: [VariantOrgsInput!]
  region: VariantRegionsInput
  remove_components: [ID!]
  remove_items: [ID!]
  remove_orgs: [ID!]
  remove_regions: [ID!]
  remove_sources: [ID!]
  remove_tags: [ID!]
  tags: [VariantTagsInput!]
}

type UpdateVariantOutput {
  change: Change
  variant: Variant
}

type User {
  avatar_url: String
  created_at: DateTime!
  email: String!
  email_verified: Boolean!
  id: ID!
  lang: String
  name: String
  orgs(after: String, before: String, first: Int, last: Int): UserOrgsPage!
  profile: UserProfile
  updated_at: DateTime!
  username: String!
}

type UserEdge {
  cursor: String!
  node: User!
}

type UserOrg {
  org: Org!
  role: String
}

type UserOrgEdge {
  cursor: String!
  node: UserOrg!
}

type UserOrgsPage {
  edges: [UserOrgEdge!]
  nodes: [UserOrg!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type UserPage {
  edges: [UserEdge!]
  nodes: [User!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type UserProfile {
  bio: String
}

type Variant implements Named {
  components(after: String, before: String, first: Int, last: Int): VariantComponentsPage!
  created_at: DateTime!
  desc: String

  """The ID of the model"""
  id: ID!
  image_url: String
  items(after: String, before: String, first: Int, last: Int): ItemsPage!
  name: String
  orgs(after: String, before: String, first: Int, last: Int): VariantOrgsPage!
  recycle_score(region_id: ID): StreamScore
  tags(after: String, before: String, first: Int, last: Int): TagPage!
  updated_at: DateTime!
}

type VariantComponent {
  component: Component!
  quantity: Float
  unit: String
}

type VariantComponentEdge {
  cursor: String!
  node: VariantComponent!
}

input VariantComponentsInput {
  id: ID!
  quantity: Float
  unit: String
}

type VariantComponentsPage {
  edges: [VariantComponentEdge!]
  nodes: [VariantComponent!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type VariantEdge {
  cursor: String!
  node: Variant!
}

input VariantItemsInput {
  id: ID!
}

type VariantOrg {
  org: Org!
  role: String
}

type VariantOrgEdge {
  cursor: String!
  node: VariantOrg!
}

input VariantOrgsInput {
  id: ID!
}

type VariantOrgsPage {
  edges: [VariantOrgEdge!]
  nodes: [VariantOrg!]
  pageInfo: PageInfo!
  totalCount: Int!
}

input VariantRegionsInput {
  id: ID!
}

input VariantTagsInput {
  id: ID!
  meta: JSONObject
}

type VariantsPage {
  edges: [VariantEdge!]
  nodes: [Variant!]
  pageInfo: PageInfo!
  totalCount: Int!
}