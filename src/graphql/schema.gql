# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @cacheControl(inheritMaxAge: Boolean, maxAge: Int, scope: CacheControlScope) on FIELD_DEFINITION | INTERFACE | OBJECT | UNION

enum CacheControlScope {
  PRIVATE
  PUBLIC
}

type CategoriesPage {
  edges: [CategoryEdge!]
  nodes: [Category!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type Category {
  ancestors(after: String, before: String, first: Int, last: Int): CategoriesPage!
  children(after: String, before: String, first: Int, last: Int): CategoriesPage!
  created_at: DateTime!
  desc: String
  desc_short: String
  descendants(after: String, before: String, first: Int, last: Int): CategoriesPage!
  id: ID!
  image_url: String
  items: [Item!]!
  name: String!
  parents(after: String, before: String, first: Int, last: Int): CategoriesPage!
  updated_at: DateTime!
}

type CategoryEdge {
  cursor: String!
  node: Category!
}

type Change {
  created_at: DateTime!
  description: String
  edits: [Edit!]!
  id: ID!
  metadata: JSONObject
  sources(after: String, before: String, first: Int, last: Int): SourcesPage!
  status: ChangeStatus!
  title: String
  updated_at: DateTime!
  user: User!
}

type ChangeEdge {
  cursor: String!
  node: Change!
}

"""Status of a change"""
enum ChangeStatus {
  APPROVED
  DRAFT
  MERGED
  PROPOSED
  REJECTED
}

type ChangesPage {
  edges: [ChangeEdge!]
  nodes: [Change!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type Component {
  created_at: DateTime!
  desc: String
  history: [ComponentHistory!]!
  id: ID!
  image_url: String
  materials: [ComponentMaterial!]!
  name: String
  primary_material: Material!
  region: Region
  tags: [Tag!]!
  updated_at: DateTime!
}

type ComponentEdge {
  cursor: String!
  node: Component!
}

type ComponentHistory {
  changes: String
  component_id: String!
  datetime: DateTime!
  original: String
}

type ComponentMaterial {
  material: Material!
  material_fraction: Float
}

input ComponentMaterialInput {
  id: ID!
  material_fraction: Float
}

input ComponentRegionInput {
  id: ID!
}

input ComponentTagsInput {
  id: ID!
  meta: JSONObject
}

type ComponentsPage {
  edges: [ComponentEdge!]
  nodes: [Component!]
  pageInfo: PageInfo!
  totalCount: Int!
}

input CreateCategoryInput {
  add_sources: [ID!]
  apply: Boolean
  change: CreateChangeInput
  change_id: ID
  desc: String
  desc_short: String
  image_url: String
  lang: String
  name: String!
  remove_sources: [ID!]
}

type CreateCategoryOutput {
  category: Category
  change: Change
}

input CreateChangeInput {
  description: String
  metadata: JSONObject
  sources: [ID!]! = []
  status: ChangeStatus
  title: String
}

input CreateComponentInput {
  add_sources: [ID!]
  apply: Boolean
  change: CreateChangeInput
  change_id: ID
  desc: String
  image_url: String
  lang: String
  materials: [ComponentMaterialInput!]
  name: String!
  primary_material: ComponentMaterialInput
  region: ComponentRegionInput
  remove_sources: [ID!]
  tags: [ComponentTagsInput!]
}

type CreateComponentOutput {
  change: Change
  component: Component
}

input CreateItemInput {
  add_sources: [ID!]
  apply: Boolean
  categories: [ItemCategoriesInput!]
  change: CreateChangeInput
  change_id: ID
  desc: String
  image_url: String
  lang: String
  name: String
  remove_sources: [ID!]
  tags: [ItemTagsInput!]
}

type CreateItemOutput {
  change: Change
  item: Item
}

input CreateProcessInput {
  add_sources: [ID!]
  apply: Boolean
  change: CreateChangeInput
  change_id: ID
  desc: String
  intent: String! = "COLLECTION"
  lang: String
  material: ID
  name: String!
  org: ID
  place: ID
  region: ID
  remove_sources: [ID!]
  variant: ID
}

type CreateProcessOutput {
  change: Change
  process: Process
}

input CreateSourceInput {
  content: JSONObject
  location: String!
  metadata: JSONObject
  type: SourceType!
}

input CreateTagDefinitionInput {
  bg_color: String
  desc: String
  image: String
  meta_template: JSONObject
  name: String!
  type: TagType!
}

input CreateVariantInput {
  add_sources: [ID!]
  apply: Boolean
  change: CreateChangeInput
  change_id: ID
  components: [VariantComponentsInput!]
  desc: String
  item_id: ID
  lang: String
  name: String!
  orgs: [VariantOrgsInput!]
  region_id: ID
  remove_sources: [ID!]
  tags: [VariantTagsInput!]
}

type CreateVariantOutput {
  change: Change
  variant: Variant
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with RFC 3339.
"""
scalar DateTime

type Edit {
  changes: EditModel
  id: ID
  model: String!
  original: EditModel
}

union EditModel = Category | Component | Item | Material | Place | Process | Region | Variant

type Item {
  categories(after: String, before: String, first: Int, last: Int): [Category!]!
  created_at: DateTime!
  desc: String
  id: ID!
  image_url: String
  name: String
  tags: [Tag!]!
  updated_at: DateTime!
  variants(after: String, before: String, first: Int, last: Int): [Variant!]!
}

input ItemCategoriesInput {
  id: ID!
}

type ItemEdge {
  cursor: String!
  node: Item!
}

input ItemTagsInput {
  id: ID!
  meta: JSONObject
}

type ItemsPage {
  edges: [ItemEdge!]
  nodes: [Item!]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Material {
  ancestors(after: String, before: String, first: Int, last: Int): MaterialsPage!
  children(after: String, before: String, first: Int, last: Int): MaterialsPage!
  components(after: String, before: String, first: Int, last: Int): ComponentsPage!
  created_at: DateTime!
  desc: String
  descendants(after: String, before: String, first: Int, last: Int): MaterialsPage!
  id: ID!
  name: String
  parents(after: String, before: String, first: Int, last: Int): MaterialsPage!
  primary_components(after: String, before: String, first: Int, last: Int): ComponentsPage!
  processes(after: String, before: String, first: Int, last: Int): ProcessPage!
  technical: Boolean!
  updated_at: DateTime!
}

type MaterialEdge {
  cursor: String!
  node: Material!
}

type MaterialsPage {
  edges: [MaterialEdge!]
  nodes: [Material!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type Mutation {
  createCategory(input: CreateCategoryInput!): CreateCategoryOutput!
  createChange(input: CreateChangeInput!): Change!
  createComponent(input: CreateComponentInput!): CreateComponentOutput!
  createItem(input: CreateItemInput!): CreateItemOutput!
  createProcess(input: CreateProcessInput!): CreateProcessOutput!
  createSource(input: CreateSourceInput!): Source!
  createTagDefinition(input: CreateTagDefinitionInput!): Tag!
  createVariant(input: CreateVariantInput!): CreateVariantOutput!
  deleteChange(id: ID!): Boolean!
  deleteSource(id: ID!): Boolean!
  markSourceProcessed(id: ID!): Source!
  updateChange(input: UpdateChangeInput!): Change!
  updateComponent(input: UpdateComponentInput!): UpdateComponentOutput!
  updateItem(input: UpdateItemInput!): UpdateItemOutput!
  updateProcess(input: UpdateProcessInput!): UpdateProcessOutput!
  updateSource(input: UpdateSourceInput!): Source!
  updateTagDefinition(input: UpdateTagDefinitionInput!): Tag!
  updateVariant(input: UpdateVariantInput!): Variant!
}

type Org {
  avatar_url: String
  created_at: DateTime!
  desc: String
  id: ID!
  name: String!
  slug: String!
  updated_at: DateTime!
  users(after: String, before: String, first: Int, last: Int): UserPage!
  website_url: String
}

type OrgEdge {
  cursor: String!
  node: Org!
}

type OrgsPage {
  edges: [OrgEdge!]
  nodes: [Org!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Place {
  address: String
  created_at: DateTime!
  desc: String
  id: ID!
  location: PlaceLocation
  name: String
  org: Org
  tags: [Tag!]!
  updated_at: DateTime!
}

type PlaceEdge {
  cursor: String!
  node: Place!
}

type PlaceLocation {
  latitude: Float!
  longitude: Float!
}

type PlacesPage {
  edges: [PlaceEdge!]
  nodes: [Place!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type Process {
  created_at: DateTime!
  desc: String
  history: [ProcessHistory!]!
  id: ID!
  intent: String!
  material: Material
  name: String!
  org: Org
  place: Place
  region: Region
  updated_at: DateTime!
  variant: Variant
}

type ProcessEdge {
  cursor: String!
  node: Process!
}

type ProcessHistory {
  changes: String
  datetime: DateTime!
  original: String
  process: Process!
  user: User!
}

type ProcessPage {
  edges: [ProcessEdge!]
  nodes: [Process!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type Query {
  getCategories(after: String, before: String, first: Int, last: Int): CategoriesPage!
  getCategory(id: ID!): Category
  getChange(id: ID!): Change
  getChanges(after: String, before: String, first: Int, last: Int, status: ChangeStatus, user_id: ID): ChangesPage!
  getComponent(id: ID!): Component
  getComponents(after: String, before: String, first: Int, last: Int): ComponentsPage!
  getItem(id: ID!): Item
  getItems(after: String, before: String, first: Int, last: Int): ItemsPage!
  getMaterial(id: ID!): Material
  getMaterials(after: String, before: String, first: Int, last: Int): MaterialsPage!
  getOrg(id: ID!): Org
  getPlace(id: ID!): Place
  getPlaces(after: String, before: String, first: Int, last: Int): PlacesPage!
  getProcess(id: ID!): Process
  getProcesses(after: String, before: String, first: Int, last: Int): ProcessPage!
  getRegion(id: ID!): Region
  getRegions(after: String, before: String, first: Int, last: Int): RegionsPage!
  getSource(id: ID!): Source
  getSources(after: String, before: String, first: Int, last: Int, type: SourceType): SourcesPage!
  getTag(id: ID!): Tag
  getTags(after: String, before: String, first: Int, last: Int): TagPage!
  getUser(id: ID!): User
  getVariant(id: ID!): Variant
  getVariants(after: String, before: String, first: Int, last: Int): VariantsPage!
  rootCategory: Category!
  rootMaterial: Material!
  searchRegionsByPoint(after: String, before: String, first: Int, last: Int, latitude: Float!, longitude: Float!): RegionsPage!
}

type Region {
  created_at: DateTime!
  id: ID!
  name: String
  placetype: String!
  updated_at: DateTime!
}

type RegionEdge {
  cursor: String!
  node: Region!
}

type RegionsPage {
  edges: [RegionEdge!]
  nodes: [Region!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type Source {
  changes: ChangesPage!
  content: JSONObject
  content_url: String
  created_at: DateTime!
  id: ID!
  location: String
  metadata: JSONObject
  processed_at: DateTime
  type: SourceType!
  updated_at: DateTime!
  user: User!
}

type SourceEdge {
  cursor: String!
  node: Source!
}

"""Type of source data"""
enum SourceType {
  API
  FILE
  IMAGE
  OTHER
  PDF
  TEXT
  URL
  VIDEO
}

type SourcesPage {
  edges: [SourceEdge!]
  nodes: [Source!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type Tag {
  bg_color: String
  created_at: DateTime!
  desc: String
  id: ID!
  image: String
  meta: JSONObject
  meta_template: JSONObject
  name: String!
  type: TagType!
  updated_at: DateTime!
}

type TagDefinition {
  bg_color: String
  created_at: DateTime!
  desc: String
  id: ID!
  image: String
  meta_template: JSONObject
  name: String!
  type: TagType!
  updated_at: DateTime!
}

type TagDefinitionEdge {
  cursor: String!
  node: TagDefinition!
}

type TagEdge {
  cursor: String!
  node: Tag!
}

type TagPage {
  edges: [TagEdge!]
  nodes: [Tag!]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""The model type of the tag"""
enum TagType {
  COMPONENT
  ITEM
  PLACE
  PROCESS
  VARIANT
}

input UpdateChangeInput {
  description: String
  id: ID!
  metadata: JSONObject
  sources: [ID!]
  status: ChangeStatus
  title: String
}

input UpdateComponentInput {
  add_sources: [ID!]
  add_tags: [ComponentTagsInput!]
  apply: Boolean
  change: CreateChangeInput
  change_id: ID
  desc: String
  id: ID!
  image_url: String
  lang: String
  materials: [ComponentMaterialInput!]
  name: String
  primary_material: ComponentMaterialInput
  region: ComponentRegionInput
  remove_sources: [ID!]
  remove_tags: [ComponentTagsInput!]
}

type UpdateComponentOutput {
  change: Change
  component: Component
}

input UpdateItemInput {
  add_categories: [ItemCategoriesInput!]
  add_sources: [ID!]
  add_tags: [ItemTagsInput!]
  apply: Boolean
  change: CreateChangeInput
  change_id: ID
  desc: String
  id: ID!
  image_url: String
  lang: String
  name: String
  remove_categories: [ItemCategoriesInput!]
  remove_sources: [ID!]
  remove_tags: [ItemTagsInput!]
}

type UpdateItemOutput {
  change: Change
  item: Item
}

input UpdateProcessInput {
  add_sources: [ID!]
  apply: Boolean
  change: CreateChangeInput
  change_id: ID
  desc: String
  id: ID!
  intent: String
  lang: String
  material: ID
  name: String
  org: ID
  place: ID
  region: ID
  remove_sources: [ID!]
  variant: ID
}

type UpdateProcessOutput {
  change: Change
  process: Process
}

input UpdateSourceInput {
  content: JSONObject
  id: ID!
  location: String
  metadata: JSONObject
  type: SourceType
}

input UpdateTagDefinitionInput {
  bg_color: String
  desc: String
  id: String!
  image: String
  meta_template: JSONObject
  name: String
  type: TagType
}

input UpdateVariantInput {
  add_components: [VariantComponentsInput!]
  add_orgs: [VariantOrgsInput!]
  add_sources: [ID!]
  add_tags: [VariantTagsInput!]
  apply: Boolean
  change: CreateChangeInput
  change_id: ID
  desc: String
  id: ID!
  item_id: ID
  lang: String
  name: String
  region_id: ID
  remove_components: [VariantComponentsInput!]
  remove_orgs: [VariantOrgsInput!]
  remove_sources: [ID!]
  remove_tags: [VariantTagsInput!]
}

type User {
  avatar_url: String
  created_at: DateTime!
  email: String!
  email_verified: Boolean!
  id: ID!
  lang: String
  name: String
  orgs(after: String, before: String, first: Int, last: Int): OrgsPage!
  profile: UserProfile
  updated_at: DateTime!
  username: String!
}

type UserEdge {
  cursor: String!
  node: User!
}

type UserPage {
  edges: [UserEdge!]
  nodes: [User!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type UserProfile {
  bio: String
}

type Variant {
  components(after: String, before: String, first: Int, last: Int): [Component!]!
  created_at: DateTime!
  desc: String
  history: [VariantHistory!]!
  id: ID!
  image_url: String
  items(after: String, before: String, first: Int, last: Int): [Item!]!
  name: String
  orgs(after: String, before: String, first: Int, last: Int): [Org!]!
  tags(after: String, before: String, first: Int, last: Int): [VariantTag!]!
  updated_at: DateTime!
}

input VariantComponentsInput {
  id: ID!
  quantity: Float
  unit: String
}

type VariantEdge {
  cursor: String!
  node: Variant!
}

type VariantHistory {
  changes: String
  datetime: DateTime!
  original: String
  variant_id: String!
}

input VariantOrgsInput {
  id: ID!
}

type VariantTag {
  tag_name: String!
}

input VariantTagsInput {
  id: ID!
  meta: JSONObject
}

type VariantsPage {
  edges: [VariantEdge!]
  nodes: [Variant!]
  pageInfo: PageInfo!
  totalCount: Int!
}