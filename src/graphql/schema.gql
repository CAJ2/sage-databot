# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @cacheControl(inheritMaxAge: Boolean, maxAge: Int, scope: CacheControlScope) on FIELD_DEFINITION | INTERFACE | OBJECT | UNION

enum CacheControlScope {
  PRIVATE
  PUBLIC
}

type CategoriesPage {
  edges: [CategoryEdge!]
  nodes: [Category!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type Category {
  ancestors(after: String, before: String, first: Int, last: Int): CategoriesPage!
  created_at: DateTime!
  desc: String
  desc_short: String
  descendants(after: String, before: String, first: Int, last: Int): CategoriesPage!
  id: ID!
  image_url: String
  items: [Item!]!
  name: String!
  updated_at: DateTime!
}

type CategoryEdge {
  cursor: String!
  node: Category!
}

type Change {
  created_at: DateTime!
  description: String
  edits: [Edit!]!
  id: ID!
  metadata: JSONObject
  sources(after: String, before: String, first: Int, last: Int): SourcesPage!
  status: ChangeStatus!
  title: String
  updated_at: DateTime!
  user: User!
}

type ChangeEdge {
  cursor: String!
  node: Change!
}

"""Status of a change"""
enum ChangeStatus {
  APPROVED
  DRAFT
  MERGED
  PROPOSED
  REJECTED
}

type ChangesPage {
  edges: [ChangeEdge!]
  nodes: [Change!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type Component {
  commercial_stream: String
  created_at: DateTime!
  desc: String
  hazardous: Boolean!
  hazardous_info: String
  history: [ComponentHistory!]!
  id: ID!
  local_stream: String
  materials: [ComponentMaterial!]!
  name: String
  primary_material: Material!
  residential_stream: String
  source: JSONObject
  updated_at: DateTime!
}

type ComponentEdge {
  cursor: String!
  node: Component!
}

type ComponentHistory {
  changes: String
  component_id: String!
  datetime: DateTime!
  original: String
}

type ComponentMaterial {
  material: Material!
  material_fraction: Float
}

type ComponentsPage {
  edges: [ComponentEdge!]
  nodes: [Component!]
  pageInfo: PageInfo!
  totalCount: Int!
}

input CreateCategoryInput {
  add_sources: [ID!]
  apply: Boolean
  change: CreateChangeInput
  change_id: ID
  desc: String
  desc_short: String
  image_url: String
  lang: String
  name: String!
  remove_sources: [ID!]
}

type CreateCategoryOutput {
  category: Category
  change: Change
}

input CreateChangeInput {
  description: String
  metadata: JSONObject
  sources: [ID!]! = []
  status: ChangeStatus
  title: String
}

input CreateComponentInput {
  add_sources: [ID!]
  apply: Boolean
  change: CreateChangeInput
  change_id: ID
  lang: String
  remove_sources: [ID!]
}

type CreateComponentOutput {
  change: Change
  component: Component
}

input CreateMaterialInput {
  add_sources: [ID!]
  ancestors: [ID!]
  apply: Boolean
  change: CreateChangeInput
  change_id: ID
  desc: String
  descendants: [ID!]
  lang: String
  name: String!
  remove_sources: [ID!]
  technical: Boolean! = false
}

type CreateMaterialOutput {
  change: Change
  material: Material
}

input CreateProcessInput {
  add_sources: [ID!]
  apply: Boolean
  change: CreateChangeInput
  change_id: ID
  lang: String
  remove_sources: [ID!]
}

type CreateProcessOutput {
  change: Change
  process: Process
}

input CreateSourceInput {
  content: JSONObject
  location: String!
  metadata: JSONObject
  type: SourceType!
}

input CreateTagInput {
  bg_color: String
  desc: String
  image: String
  meta_template: JSONObject
  name: String!
  type: TagType!
}

input CreateVariantInput {
  add_sources: [ID!]
  apply: Boolean
  change: CreateChangeInput
  change_id: ID
  desc: String
  item_id: ID
  lang: String
  name: String!
  region_id: ID
  remove_sources: [ID!]
}

type CreateVariantOutput {
  change: Change
  variant: Variant
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with RFC 3339.
"""
scalar DateTime

type Edit {
  changes: EditModel
  id: ID
  model: String!
  original: EditModel
}

union EditModel = Category | Component | Item | Material | Place | Process | Region | Variant

type Item {
  categories(after: String, before: String, first: Int, last: Int): [Category!]!
  created_at: DateTime!
  desc: String
  id: ID!
  image_url: String
  name: String
  updated_at: DateTime!
  variants: [Variant!]!
}

type ItemEdge {
  cursor: String!
  node: Item!
}

type ItemsPage {
  edges: [ItemEdge!]
  nodes: [Item!]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Material {
  ancestors(after: String, before: String, first: Int, last: Int): [Material!]!
  components(after: String, before: String, first: Int, last: Int): ComponentsPage!
  created_at: DateTime!
  desc: String
  descendants(after: String, before: String, first: Int, last: Int): [Material!]!
  id: ID!
  name: String
  primary_components(after: String, before: String, first: Int, last: Int): ComponentsPage!
  processes(after: String, before: String, first: Int, last: Int): ProcessPage!
  source: JSONObject
  technical: Boolean!
  updated_at: DateTime!
}

type MaterialEdge {
  cursor: String!
  node: Material!
}

type MaterialsPage {
  edges: [MaterialEdge!]
  nodes: [Material!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type Mutation {
  createCategory(input: CreateCategoryInput!): CreateCategoryOutput!
  createChange(input: CreateChangeInput!): Change!
  createComponent(input: CreateComponentInput!): CreateComponentOutput!
  createMaterial(input: CreateMaterialInput!): CreateMaterialOutput!
  createProcess(input: CreateProcessInput!): CreateProcessOutput!
  createSource(input: CreateSourceInput!): Source!
  createTag(input: CreateTagInput!): Tag!
  createVariant(input: CreateVariantInput!): CreateVariantOutput!
  deleteChange(id: ID!): Boolean!
  deleteSource(id: ID!): Boolean!
  markSourceProcessed(id: ID!): Source!
  updateChange(input: UpdateChangeInput!): Change!
  updateComponent(input: UpdateComponentInput!): UpdateComponentOutput!
  updateMaterial(input: UpdateMaterialInput!): UpdateMaterialOutput!
  updateProcess(input: UpdateProcessInput!): UpdateProcessOutput!
  updateSource(input: UpdateSourceInput!): Source!
  updateTag(input: UpdateTagInput!): Tag!
  updateVariant(input: UpdateVariantInput!): Variant!
}

type Org {
  avatar_url: String
  created_at: DateTime!
  desc: String
  id: ID!
  name: String!
  slug: String!
  updated_at: DateTime!
  users(after: String, before: String, first: Int, last: Int): UserPage!
  website_url: String
}

type OrgEdge {
  cursor: String!
  node: Org!
}

type OrgsPage {
  edges: [OrgEdge!]
  nodes: [Org!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Place {
  address: String
  created_at: DateTime!
  desc: String
  history: [PlaceHistory!]!
  id: ID!
  name: String
  org: Org
  tags: [PlaceTag!]!
  updated_at: DateTime!
}

type PlaceEdge {
  cursor: String!
  node: Place!
}

type PlaceHistory {
  changes: String
  datetime: DateTime!
  original: String
  place_id: String!
  user_id: String!
}

type PlacePage {
  edges: [PlaceEdge!]
  nodes: [Place!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type PlaceTag {
  tag_name: String!
}

type Process {
  created_at: DateTime!
  desc: String
  history: [ProcessHistory!]!
  id: ID!
  intent: String!
  material: Material!
  name: String!
  org: Org
  place: Place
  region: Region
  source: JSONObject!
  updated_at: DateTime!
}

type ProcessEdge {
  cursor: String!
  node: Process!
}

type ProcessHistory {
  changes: String
  datetime: DateTime!
  original: String
  process: Process!
  user: User!
}

type ProcessPage {
  edges: [ProcessEdge!]
  nodes: [Process!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type Query {
  getCategories(after: String, before: String, first: Int, last: Int): CategoriesPage!
  getCategory(id: ID!): Category!
  getChange(id: ID!): Change!
  getChanges(after: String, before: String, first: Int, last: Int, status: ChangeStatus, user_id: ID): ChangesPage!
  getComponent(id: ID!): Component!
  getComponents(after: String, before: String, first: Int, last: Int): ComponentsPage!
  getItem(id: ID!): Item!
  getItems(after: String, before: String, first: Int, last: Int): ItemsPage!
  getMaterial(id: ID!): Material!
  getMaterials(after: String, before: String, first: Int, last: Int): MaterialsPage!
  getOrg(id: ID!): Org!
  getProcess(id: ID!): Process!
  getProcesses(after: String, before: String, first: Int, last: Int): ProcessPage!
  getSource(id: ID!): Source!
  getSources(after: String, before: String, first: Int, last: Int, type: SourceType): SourcesPage!
  getTag(id: ID!): Tag!
  getTags(after: String, before: String, first: Int, last: Int): TagPage!
  getUser(id: ID!): User!
  getVariant(id: ID!): Variant!
  getVariants(after: String, before: String, first: Int, last: Int): VariantsPage!
  place(id: String!): Place
  places(page: Float = 1, perPage: Float = 10): PlacePage!
  region(id: String!): Region
  regions(page: Float = 1, perPage: Float = 10): RegionPage!
  rootCategory: Category!
  rootMaterial: Material!
}

type Region {
  admin_level: Float!
  created_at: DateTime!
  id: ID!
  name: String
  updated_at: DateTime!
}

type RegionEdge {
  cursor: String!
  node: Region!
}

type RegionPage {
  edges: [RegionEdge!]
  nodes: [Region!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type Source {
  changes: ChangesPage!
  content: JSONObject
  content_url: String
  created_at: DateTime!
  id: ID!
  location: String
  metadata: JSONObject
  processed_at: DateTime
  type: SourceType!
  updated_at: DateTime!
  user: User!
}

type SourceEdge {
  cursor: String!
  node: Source!
}

"""Type of source data"""
enum SourceType {
  API
  FILE
  IMAGE
  OTHER
  PDF
  TEXT
  URL
  VIDEO
}

type SourcesPage {
  edges: [SourceEdge!]
  nodes: [Source!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type Tag {
  bg_color: String
  created_at: DateTime!
  desc: String
  id: ID!
  image: String
  meta_template: JSONObject
  name: String!
  type: TagType!
  updated_at: DateTime!
}

type TagEdge {
  cursor: String!
  node: Tag!
}

type TagPage {
  edges: [TagEdge!]
  nodes: [Tag!]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""The model type of the tag"""
enum TagType {
  COMPONENT
  PLACE
  VARIANT
}

input UpdateChangeInput {
  description: String
  id: ID!
  metadata: JSONObject
  sources: [ID!]
  status: ChangeStatus
  title: String
}

input UpdateComponentInput {
  add_sources: [ID!]
  apply: Boolean
  change: CreateChangeInput
  change_id: ID
  lang: String
  remove_sources: [ID!]
}

type UpdateComponentOutput {
  change: Change
  component: Component
}

input UpdateMaterialInput {
  add_sources: [ID!]
  ancestors: [ID!]
  apply: Boolean
  change: CreateChangeInput
  change_id: ID
  desc: String
  descendants: [ID!]
  id: ID!
  lang: String
  name: String
  remove_sources: [ID!]
  technical: Boolean
}

type UpdateMaterialOutput {
  change: Change
  material: Material
}

input UpdateProcessInput {
  add_sources: [ID!]
  apply: Boolean
  change: CreateChangeInput
  change_id: ID
  lang: String
  remove_sources: [ID!]
}

type UpdateProcessOutput {
  change: Change
  process: Process
}

input UpdateSourceInput {
  content: JSONObject
  id: ID!
  location: String
  metadata: JSONObject
  type: SourceType
}

input UpdateTagInput {
  bg_color: String
  desc: String
  id: String!
  image: String
  meta_template: JSONObject
  name: String
  type: TagType
}

input UpdateVariantInput {
  add_sources: [ID!]
  apply: Boolean
  change: CreateChangeInput
  change_id: ID
  desc: String
  id: ID!
  item_id: ID
  lang: String
  name: String
  region_id: ID
  remove_sources: [ID!]
}

type User {
  avatar_url: String
  created_at: DateTime!
  email: String!
  email_verified: Boolean!
  id: ID!
  lang: String
  name: String
  orgs(after: String, before: String, first: Int, last: Int): OrgsPage!
  profile: UserProfile
  updated_at: DateTime!
  username: String!
}

type UserEdge {
  cursor: String!
  node: User!
}

type UserPage {
  edges: [UserEdge!]
  nodes: [User!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type UserProfile {
  bio: String
}

type Variant {
  created_at: DateTime!
  desc: String
  history: [VariantHistory!]!
  id: ID!
  image_url: String
  items: [Item!]!
  name: String
  tags: [VariantTag!]!
  updated_at: DateTime!
}

type VariantEdge {
  cursor: String!
  node: Variant!
}

type VariantHistory {
  changes: String
  datetime: DateTime!
  original: String
  variant_id: String!
}

type VariantTag {
  tag_name: String!
}

type VariantsPage {
  edges: [VariantEdge!]
  nodes: [Variant!]
  pageInfo: PageInfo!
  totalCount: Int!
}